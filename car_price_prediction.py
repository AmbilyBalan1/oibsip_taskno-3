# -*- coding: utf-8 -*-
"""Car price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yi1_7JbL0G2KhWa01WNbcHAZwqTnHc0C
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
import math

"""# **Dataset**"""

data=pd.read_csv('car data.csv')
data

data.columns

data.head()

data.tail()

data.shape

data.info()

data.describe().style.background_gradient(cmap='winter')

"""# **Correlation**"""

corr=data.corr().style.background_gradient(cmap='gray')
corr

"""# **Data** **visualization**"""

sns.set(rc={'figure.figsize':(15,10)})
sns.heatmap(data.corr(),annot=True,cmap='rainbow')

year=data['Year'].value_counts()
ax=plt.axes()
ax.set(facecolor='yellow')
sns.set(rc={'figure.figsize':(16,8)},style='darkgrid')
ax.set_title("To visualize the which year most car sold",fontsize=32,fontweight=900)
sns.barplot(x=year.index,y=year,palette='rainbow')

fuel_type=data['Fuel_Type'].value_counts()
label=['Petrol','Diesel','CNG']
plt.figure(figsize=(16,9))
plt.pie(fuel_type,labels=label, autopct='%1.2f%%',explode=[0.03,0.05,0.07],colors=['green','yellow','orange'])
plt.title("To visualize the fuel_type in the dataset",fontsize=32,fontweight='bold')
plt.show()

car_selling_price=data[['Car_Name','Selling_Price']].groupby(['Car_Name','Selling_Price']).sum().reset_index().sort_values(by='Selling_Price',ascending=False)
import plotly.express as px
fig=px.histogram(car_selling_price,x='Car_Name',y='Selling_Price',title="To visualize the car model with selling price")
fig.update_layout(bargap=0.2,bargroupgap=0.1,
    plot_bgcolor='black')

fig.show()

fig=px.scatter(data,y='Selling_Price',x='Present_Price')
fig.update_layout(bargap=0.2,bargroupgap=0.1,
    plot_bgcolor='yellow')
fig.show()

"""# **Model** **building**"""

from sklearn.preprocessing import LabelEncoder,StandardScaler
label=LabelEncoder()
data['Car_Name']=label.fit_transform(data['Car_Name'])
data['Fuel_Type']=label.fit_transform(data['Fuel_Type'])
data['Selling_type']=label.fit_transform(data['Selling_type'])
data['Transmission']=label.fit_transform(data['Transmission'])
X=data.drop(['Selling_Price'],axis=1)
y=data['Selling_Price']

scaler=StandardScaler()
X=scaler.fit_transform(X)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)

linear=LinearRegression()
linear.fit(X_train,y_train)
linear_pred=linear.predict(X_test)
print(f'The Test_accuracy: {linear.score(X_test,y_test)*100:.2f}')
print(f'The Train_accuracy: {linear.score(X_train,y_train)*100:.2f}')

plt.scatter(y_test, linear_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices")
plt.show()